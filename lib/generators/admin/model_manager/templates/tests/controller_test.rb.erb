require 'test_helper'

class Admin::<%= @controller_name.pluralize %>ControllerTest < ActionDispatch::IntegrationTest
  # NOTE: your users fixtures file must include a fixture whose name is
  #       'admin'; said fixture must have admin privileges 
  # NOTE: your model fixtures file must include a fixture whose name is
  #       'sample_<record_name>' (e.g. 'sample_book', 'sample_user', etc.)
  #       as well as more than 20 (depends on pagination test) other samples
  # NOTE: your model must provide a method named 'display' or whatever you
  #       passed as a display method name when generating the admin:model_manager
  # NOTE: Please, manually complete the record creation and update tests

  setup do
    @admin = users(:admin)
    log_in_as @admin
    <% sample_record = "sample_#{@record_name}" %>
    <%= "@#{sample_record}" %> = <%= @record_name.pluralize %>(<%= ":#{sample_record}" %>)
  end

  test 'should get index' do
    get admin_<%= @record_name.pluralize %>_path
    assert_response :success
    assert_template 'index'
  end

  test 'should paginate <%= @record_name.pluralize %>' do
    get admin_<%= @record_name.pluralize %>_path
    assert_select 'main nav.pagination', count: 2
    first_page_of_<%= @record_name.pluralize %> = <%= @controller_name %>.paginate(page: 1, per_page: 20)
    assert_select 'ul#pagination-items' do
      assert_select 'li', 20
    end
    first_page_of_<%= @record_name.pluralize %>.each do |<%= @record_name %>|
      assert_select 'a[href=?]',
                    admin_<%= @record_name %>_path(<%= @record_name %>),
                    text: <%= @record_name %>.<%= options['display-method'] %>
      assert_select 'a[href=?]',
                    edit_admin_<%= @record_name %>_path(<%= @record_name %>),
                    text: 'edit'
      assert_select 'a[href=?][data-method="delete"]',
                    admin_<%= @record_name %>_path(<%= @record_name %>),
                    text: 'delete'
    end
  end

  test 'should get show' do
    get admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>)
    assert_response :success
    assert_template 'show'
  end

  test 'should link back to index page on show' do
    get admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>)
    assert_select 'a[href=?]', admin_<%= @record_name.pluralize %>_path, text: 'Back to index page'
  end 

  test 'should link to edit page on show' do
    get admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>)
    assert_select 'a[href=?]', edit_admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>), text: 'Edit'
  end

  test 'should display <%= @record_name %> information' do
    get admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>)
    assert_select 'span#created_at', text: "#{<%= "@#{sample_record}" %>.created_at}"
    assert_select 'span#updated_at', text: "#{<%= "@#{sample_record}" %>.updated_at}"
    assert_select 'h1', text: "<%= @controller_name %>: #{<%= "@#{sample_record}" %>.<%= options['display-method'] %>}"
    <% @model_fields.each do |field| %>
    assert_select <%= "\"p\##{field[1..-1]}\"" %>, text: <%= "\"#{field[1..-1]}: \#{@#{sample_record}.#{field[1..-1]}}\"" %>
    <% end %>
  end

  test 'should get new' do
    get new_admin_<%= @record_name %>_path
    assert_response :success
    assert_template 'new'
  end

  test 'should link to new on index page' do
    get admin_<%= @record_name.pluralize %>_path
    assert_response :success
    assert_template 'index'
    assert_select 'a[href=?]', new_admin_<%= @record_name %>_path, text: 'New <%= @record_name %>'
  end

  test 'should render a form for <%= @record_name %> creation' do
    get new_admin_<%= @record_name %>_path
    assert_select 'form[action="/admin/<%= @record_name.pluralize %>"]'
  end

  test 'should link back to index page on new' do
    get new_admin_<%= @record_name %>_path
    assert_select 'a[href=?]', admin_<%= @record_name.pluralize %>_path, text: 'Back to index page'
  end 

  test 'should get edit' do
    get edit_admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>)
    assert_response :success
    assert_template 'edit'
    assert_not flash.empty?
    warning_msg = 'WARNING: be very careful when altering field values'
    assert_equal warning_msg, flash.now[:warning]
  end
  
  test 'should link back to index page on edit' do
    get edit_admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>)
    assert_select 'a[href=?]', admin_<%= @record_name.pluralize %>_path, text: 'Back to index page'
  end 

  test 'should link to show page on edit' do
    get edit_admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>)
    assert_select 'a[href=?]', admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>), text: 'View information'
  end

  test 'should not create a <%= @record_name %> with invalid input data' do
    assert_no_difference '<%= @controller_name %>.count' do
      post admin_<%= @record_name.pluralize %>_path, params: {
        <%= @record_name %>: {
          # TODO: add invalid input data here
        }
      }
    end
    assert_template 'new'
  end

  test 'should create a user with valid input data' do
    assert_difference '<%= @controller_name %>.count', 1 do
      post admin_<%= @record_name.pluralize %>_path, params: {
        <%= @record_name %>: {
          # TODO: add valid input data here
        }
      }
    end
    assert_response :redirect 
    assert_not flash.empty?
    assert_equal '<%= @controller_name %> has been created', flash[:success]
  end

  test 'should not update user with invalid input data' do
    travel 1.hours # ensure last time updated is not now
    assert_no_changes '<%= "@#{sample_record}" %>.reload.updated_at' do
      patch admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>), params: {
        <%= @record_name %>: {
          # TODO: add invalid input data here
        }
      }
    end
    assert_template 'edit'
  end

  test 'should update user with valid input data' do
    travel 1.hours do 
      assert_changes '<%= "@#{sample_record}" %>.reload.updated_at' do
        patch admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>), params: {
          <%= @record_name %>: {
            # TODO: add valid input data here
          }
        }
      end
    end
    assert_response :redirect
    assert_redirected_to admin_<%= @record_name %>_path(<%= "@#{sample_record}"%>)
    assert_not flash.empty?
    assert_equal '<%= @controller_name %> has successfully been updated', flash[:success]
  end

  test 'should destroy <%= @record_name %>' do
    assert_difference '<%= @controller_name %>.count', -1 do
      delete admin_<%= @record_name %>_path(<%= "@#{sample_record}" %>)
    end
    assert_response :redirect
    assert_redirected_to admin_<%= @record_name.pluralize %>_path
    assert_not flash.empty?
    assert_equal '<%= @controller_name %> has successfully been deleted', flash[:success]
  end
end

